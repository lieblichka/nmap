______________nmap______________
tracefile: http://www.stationx.net/nmap-cheat-sheet *pdf

PART 1:
- sort -r -k3 /usr/share/nmap/nmap-services | grep tcp | head -n 100
 # наиболее популярные порты
- nmap 192.168.100.1 
 # nmap (host) если выполнять эту команду не под привилегированным пользователем
то nmap не может высылать сырые tcp пакеты (syn only), а устанавливает 
полноценное соединение с хостом (syn -> |  syn+ack -<  |  ack ->)

PART 2:
Определение целей:
 - 1) Имена хостов microsoft.com/24
 - 2) Ip-адреса 192.168.0.1
 - 3) Сети 10.0.0-255.1-254 (диапазоны адресов)
 
nmap -sS 192.168.100.1-35 & nmap 192.168.100.1 -sS
 # цель можно указывать как после опции так и до нее

nmap -sS ip
 # default with root
nmap -sT ip
 # default without root privilege
nmap -iL  filename 
 # scan list of host from set file
nmap -iR 3 -vv  
 # scan three random ip adress -vv dual verbality
---------------------------------------------------
Состояния портов: 
 # Открытое состояние ( приложение принимает )
  - tcp соединение
  - udp датаграммы
  - sctp ассоциации 
  - каждый открытый порт это проход для атаки

 # Закрытое состояние
  - закрытый порт принимает и отвечает на запросы nmap 
  - приложения не слушают на закрытом порту
  - закрытый порт -> хост в рабочем состоянии
  - закрытый порт впоследствии может стать открытым

 # Фильтрующее состояние
  - nmap не может определить открыт ли порт
  - тестовые пакеты nmap не могут достичь порта 
  - firewall, routing rules, access control list acl etc...
  - иногда отвечают acmp откликом type 3 code 13

 # Нефильтруюшее состояние
  - nmap не может определить открыт ли порт или закрыт 
  - syn сканирование не подходит для такого порта

 # Открыто или фильтруюшее состояние 
  - пакетная фильтрация могла сбросить запрос
  - клиссифицируется через udp, ip, xmass, null сканирование

 # Закрыт или фильтруется
  - классифицируется через ip, id, idl сканированими 
---------------------------------------------------
 Discovery - Активные хосты с открытыми портами 
 1) Хост в рабочем состоянии 
 2) Работающие службы на хосте

nmap 192.168.0.1-5 -v
 # без опций
 	+ICMP echo request(ping)
 	+TCP SYN packet to port 443
 	+TCP ACK packet to port 80
 	+ICMP timestamp request 
 # Exceptions ARP for IPV4 and IPV6 local eth-network

nmap www.google.com -v 
	+PING сканирование т.к. домен находится не в локальной сети
	+INIT PARALLEL DNS resolution
----------------------------------------------------
Сканирование с целью составления списка
  -sL # по сути никакого сканирования не будет выполнено
	по умолчанию nmap будет осуществлять обратное разрешение DNS
	с целью определить имена хостов(ip) (DNS) (наименьший уровень вторжения) 
	from 85.23.45.21 to www.hello.com
nmap -sL facebook.com 
nmap -iR 300 -sL -vv

  -sn # PING сканирование, порты не сканируются, а выводится
  лишь список доступных хостов (больший уровень вторжения)
nmap 192.168.0.1/24 -sn

  -Pn # расценивать все хосты как работающие
   (пропускать этап обнаружения хоста)
nmap 192.168.0.1-5 -Pn -v
-------------------------------------------------------------------------
  -PS|PA|PU|PY # TCP SYN-ACK, UDP or SCTP сканирование УКАЗАННЫХ портов
  обнаружение по заданым портам включая порты по умолчанию 
  -PS + -sn # взаимоисключающие флаги, при такой инструкции
  указанные порты не будут просканированы
   nmap -iR 10 -PS22-25,80,113,1050,3500 -sn -v

  -PS[port,..,] # SYN ping по этой опции отправляется пустой syn package
  с флагом (SYN) проверяемый порт по умолчанию 80 reset syn-ack ответ
  сообщает о том, что хост активен 
nmap 192.168.0.1-5 -PS22-25,80,113,1050,3500 -v
  
  -PA[port,..,] # отправляет сразу ACK пакет и ждет ответа ESTABLISHED
  либо RST пакет
nmap 192.168.0.1-5 -PA22-25,80,113,1050,3500 -sn -v

  -PU[port,..,] # устанавливает udp соединение с указанным портом 
  UDP ping
nmap 192.168.0.1-5 -PU53 -v
--------------------------------------------------------------------------
   -PE|PP|PM # ICMP echo, timestamp, and netmask request - обнаружение
   с использованием запроса ICMP эхо, временной метки, сетевой маски 
   
   -PE # ICMP echo
nmap 192.168.0.1-255 -PE -sn -v

   -PO # ip ptocol Ping - default protocol 1.ICMP 2.IGMP 4IPvIP
nmap 192.168.0.1-254 -PO1,2,4 -sn 
   
   -PR # ARP сканирование 
nmap 192.168.0.1/24 -PR -sn -vv # применяется в локальных eth-сетях 

   --dns-server  # опция задания пользовательского DNS 
nmap 192.168.0.1-200 -sL --dns-server 192.168.0.1 
	выполнение обратного DNS сканирования с указанием 
	пользовательского DNS сервера
   --traceroute # показывет полный путь до указанного хоста
   начиная с локального шлюза до DNS сервера провайдера
nmap -iR 3 -sn --traceroute
---------------------------------------------------------------------------
RECEPTIONS SCAN PORT - этап сканирования портов 

	# TCP и SCTP сканирование можно одновременно использовать 
	с UDP сканированием
	-sS/sT/sA/sW/sM # TCP SYN,Connect(),ACK,Window,Maimon scans

	-sS # сырое TCP сканирование syn
nmap 192.168.0.143 -sS -v # 	

	-sT # полное TCP сканирование connect()
nmap 192.168.0.143 -sT -v 

	-sU # UDP сканирование 
nmap 192.168.0.199 -sU -v # отправка udp пакетов popular udpp 53,161	
	
	-sU -SS # udp и tcp могут использоваться папаллельно друг другу
nmap 192.168.0.1 -sS -v -sU 
 	 # UDP сканирование работает путем отправки UDP пакета
	 на каждый целевой порт, для некоторых популярных портов 
	 такик как 53,161 отправляется определенный -->

	-> PAYLOAD(для увеличения быстроты отклика), а для болшинства портов
	 отправляется пустой UDP пакет, службы отвечаеют UDP пакетом
	 подтверждая, что порт открыт

	EXAMPLE 1: отправлен пустой UDP пакет, служба ответила UDP пакетом
	 - 137/udp	open -< пришел ответ 
	 - 5353/udp	open -< пришел ответ 
	
	EXAMPLE 2: отправлен пустой UDP пакет, ответа нет
			   отправлен повторный UDP пакет, ответа нет
	 - 138/udp  open|filtred -< нет ответа после вторичной отправки
	 # возможна пакетная фильтрация -> 

	-> sV решение ^-V-^
	 -sU -v -sV опция для определения версии служб которая отправляет
	 больше данных на UDP порты

	--host-timeout 2m # некоторые закрытые UDP порты отправляют ICMP ошибку 
	недостижимости порта и ограничивают лимит ICMP сообщений о недостижимости
	порта, nmap обнаруживает ограничение по частоте отправки сообщений и
	замедляет частоту отправки пакетов, которые целевая машина в любом 
	случае будет сбрасывать. HOST TIMEOUT сбрасывает медленные хосты по 
	истечению указанного времени

	-sY/sZ # SCTP INIT/COOKIE ECHO протокол управления потоком 
	в основном используется службой SS7 и SIGTRAN в мобильных сетях
--------------------------------------------------------------------------
	-sA # ACK сканирование (отправляет пакет с флагом ACK)
	при ACK сканировании нельзя определить открыт ли порт, открыт либо
	фильтруется или закрыт. Используется для определения правил файрвола
	____FIREWALL RULES______
	В данном случае TCP ACK для определния:
	 - Запоминает ли FIREWALL состония 
	 - Какие порты фильтруются   
	В момент сканирования НЕФИЛЬТРУЕМЫХ систем:
	 - Открытые и закрытые порты возвращают RST пакет, NMAP помечает их
	 как NOFILTRED (они достижимы для ACK пакета)
	 - Порты, которые не отвечают или отправляюьт ОПРЕДЕЛЕННЫЕ icmp 
	 сообщения об ошиках (type 3 code 1,2,3,9,10,13) NMAP помечает их
	 как FILTRED
	 - При сканировани устройства перед которым используется фильотрующий
	 FIREWALL следует использовать ACK сканирование  
nmap 192.168.0.1 -v -sA
	
	-sW # Window сканирование (почти тоже самое, что ACK сканирование)
	за исключением того, что использует особенности реализации определенных
	систем для разделения портов на открытые и закрытые, вместо того, чтобы
	всегда при получении RST пакета выводить NOFILTRED. Путем анализа поля
	WINDOW в TCP заголовке возвращенного в ответ RST пакета 
nmap 192.168.0.1 -v -sW 
----------------------------------------------------------------------------
	-sN/sF/sX # TCP Null, FIN, Xmas scan, устанавливается определенный
	TCP флаг 
	- NULL не устанавливаются никакие биты, 0 флагов в TCP заголовке
	- FIN устанавливаются только TCP fin bits
	- XMASS устанавливаются fin, psh, urg 
	(раскрашивают пакет как рождественскую елку) 
	
	---> Используют незаметную лазейку в TCP RFC для разделения портов
	на закрытые и открытые, 
	ключевая особенность - потенциально могут обойти определенные 
	неучитывающие состояния FIREWALL и маршрутизаторы с пакетной фильтрацией 
nmap 192.168.0.1 -v sN # TCP null
	
	Maimon scans # работает точно также, только используется FIN ACK
	RST пакет должен быть сгенерирован в ответ на подобный запрос
	если порт закрыт или открыт. 
	P.S. многие PSD системы просто сбрасывае такие пакет если порт открыт
nmap 192.168.0.1 -v -sM 

	--scanflags <flags> # Установить пользовательский флаг TCP пакета

	-sI  # Зомби сканирование или ленивое сканирование
	при правильном выборе хоста появляется возможность сканировать 
	через ZOMBIE HOST (чужой хост) -> пакеты будут отправляться 
	с чужого хоста. Минус: Тяжело найти 
	TCP Idle SCAN (-sI)

	-sO # сканирование через IP protocol 
nmap 192.168.0.1 -sO # без указания опций выполняется  default scan

	-sO -p 1,2,3,4,5,6,17 # указываются нужные ip протоколы при сканировании  
nmap 192.168.0.1 -sO -p 1,2,3,4,5,6,17

	-b # FTP relay host, ftp bounce scan. Сканирование с проходом по FTP
	используется особенность протокола: 
	FTP RFS 959 (поддержка прокси-ftp-соединений )
----------------------------------------------------------------------
METHOD FOR CHOOSE PORT, NMAP TEHCNICAL 

	-p <port ranges> : Only scan specifed ports
nmap 192.168.0.1 -p 21-1000 : Сканирование диапазона с 21 по 1000	 
	
	-p U:ranges,number,T:ranges,number -sU -sS 
		# together scan with UDP and TCP 
nmap 192.168.0.1 -v -p U:53,111,137,5353,T:21-25,80,139,8080 -sU -sS

	-p U:ranges,number -sU # custom port with udp scan 
nmap 192.168.0.1 -v -p U:53,111,137,5353 -sU 

	-p T:ranges,number -sS # custom port with tcp scan 
nmap 192.168.0.1 -v -p T:21-25,80,139,8080 -sS

	-p S:ranges,number -sY # custom port with sctp scan 
nmap host -v -p S:9 -sY

	-p- -sU # scan all 65535 UDP ports
nmap 192.168.0.1 -p- -v -sU 

	-p- -sS # scan all 65535 TCP ports  
nmap 192.168.0.1 -p- -v -sS

	-p name of service # search ports by services name
nmap 192.168.0.1 -v -p http,https,ftp,etc,...
	# nmap will look for ports of the specifed services 
	# nmap будет искать все возможные порты 
	на которой может работать указанная служба, используя
	список портов из своей базы
	
	-F # fast scanning # режим быстрого сканирования
nmap 192.168.0.1 -v -F # производится сканирование по сотни (100)
	наиболее популярных портов 

	-p[NUM0]-[NUM1] # будет просканирован диапазон портов с NUM0 по NUM1
	MIN NUM0 = 0 and MAX NUM1 = 1

	EXAMPLES: 
	-p-65535 # будут просканированы порты с 1 по 65535
nmap 192.168.0.1 -p-65535 -v


	-p0- # будут просканированы порты с 1 по 65535
nmap host -p0- -v 

	-p0-1000 # будут просканированы порты с 1 по 100
nmap 192.168.0.1 -p0-100 -v  

	-p12-14 # будут просканированы порты с 12 по 14
nmap host -p12-14-

	--top-ports [num] # сканирование n популярных портов 
nmap host --top-ports 2000 # сканирование 2000 популярных портов

	--top-ports [num] --exclude-ports ranges,num,etc,...
	# сканирование n популярных портов исключая ranges, num порты 
nmap host --top-ports 2000 --exclude-ports 80,21,5353,139-9000

	--top-ports -r # по умолчанию скарование портов происходит в случайном
	порядке во избежание обнаружения, опция -r включает режим 
	don't randomize и порты сканируются последовательно
nmap host --top-ports 2000 -r -v  

	--port-ratio <ratio> # Сканировать порты с более популярным рейтингом 
---------------------------------------------------------------------------
SERVICE/VERSION DETECTION

	-sV # Тестировать открытые порты для определения названия и версии служб
nmap scanme.nmap.org -sV -p 80,22 
	
	# Знание версии служб значительно лучше
	помогает определить перед какими эксплоитами уязвима служба

	/usr/share/nmap/nmap-service-probes # база данных с запросами
	служб в nmap, которая содержит запросы для прошения к различным службам
	и соответствующие выражения для распознавания и парсинга ответов 

nmap 192.168.0.143 -sV 
	# nmap по умолчанию пытается:
	- определить протокол служб
	example:  ftp,ssh,telnet,http - version of protocol 
	- название приложения
	ex: Apache httpd,
	- номер версии
	- тип хоста 
	- тип устройства 
	ex: printer or router
	- семейство ОС 
	ex: Windows or Linux 
	- список типовых платформ 
	CPE: перечисление общих платформ 
	cpe:/<part>:<vendor>:<product>:<version>:<update>:<edition>:<language>
	
	-sV # Функция определения версий также может определять некоторые
	UDP open/filtred порты в открытом ли они состоянии

	TCP open/filtred порты - при онбнаружении RPС служб например на порту
	139 автоматически используется модуль nmap RPC grinder для определения
	программ RPC и их версий, затем передача в их адрес пустых команд SAN RPC
	
	########
	Когда nmap получает лостаточное кол-во ответов от сервера, но не может
	найти совпадение версий в базе-данных (/usr/share/nmap/nmap-service-probe)
	он выводит специальный отпечаток 
	======================NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)=====
	а также url по которому можно отправить отпечаток если точно знать 
	какая служба используется, именно так наполняется база данных nmap

	-sV --allports # не исключать никакие порты при определении версий
	по умолчанию система определения версий пропускает tcp portr 9100
	потому-что некоторые принтеры печатают все, что отправляется на
	этот порт и другие порты 
nmap 192.168.0.1 -sV --allports

	-sV --version-intensity [0-9] # уровень интенсивности определяет какие
	виды тестирования должны применяться чем выше цифра, тем больше
	вероятность что служба будет идентифицированна правильно 

nmap host -sV --version-intensity 7 # по умолчанию без указания опции 
		# 	использется 7

	-sV --version-light -v # вариант для облегченной версии сканирования 
nmap host --version-light -v 

	-sV --version-all -v # будет пытаться выполнить всевозможные запросы
nmap host -sV --version-all -v # удобный запрос для интенсивности 9

	-sV --version-trace  # указывает nmap выводить инф. по отладке
			# в основном не пригодится только если не добавлены 
			пользовательские паттерны для определения версии
nmap host -sV --version-trace # 

---------------------------------------------------------------------------
OS DETECTION 

	-O # nmap поддерживает удаленное определение ОС 
	при помощи снятия отпечатков стека tcp/ip fingerprint
	nmap отправляет серию tcp udp пакетов на удаленный хост и анализирует
	ответ
nmap 192.168.0.1 -O

	/usr/share/nmap/nmap-os-db # база данных с паттернами для установления 
	операционной системы если nmap не находит данных в своей базе 
	он предоставит url и отпечаток который можно отправить в nmap 
	чтобы дополнить базу 

	-O -v # покажет досконально какие проверки проводятся
	- также покажет сложность установки ложного TCP соединения 
	с удаленным хостом, может пригодится для эксплуатации  доверительных
	отношений на основе исходных ip адресов: 
		RLOGIN, firewalls, filter of login
	- либо для сокрытия источника атаки как при IDL сканировании 
	- данные о генерации IP ID последовательности, многие системы 
	непреднамеренно раскрывают критичную информацию об уровнях трафика,
	--------- как они генерируют 16 ричное поле id IP IDpackets -------------
						В А Ж Н О 
	
	-O -Pn --osscan-limit # предназначена для ограничения работы функций 
	определения ос только для перспективных целей
	- цель перспективна если обнаружен хотя бы один открытый или закрытый порт
	tcp udp порт 
	- nmap не будет определять системы на хостах неудовлетворяющих 
	этому критерию 
	- Pn вместе с osscan-limit это может сэкономить время 
nmap 192.168.0.1 -O -Pn -v -osscan-limit

	-O --fuzzy == --osscan-guess # опция угадывания 
	результатов определения ОС которая заставляет nmap угадывать
	более агрессивно
nmap host -O --fuzzy 

	-O --fuzzy -mas-os-tries 1 # устанавливает максимальное кол-во
	попыток определения ОС на целевой машине, по-умолчанию nmap
	- совершает 5 попыток при наличии благоприятных условий определения ос
	- 2 если условия неблагоприятны
nmap host -O --fuzzy -mas-os-tries 1
---------------------------------------------------------------------------
SCRIPT SCAN

	Скриптовый движок nmap NSE - одна из наиболее гмбких и мощных возможностей
	позволяет пользователям писать простые скрипты на языке программирования
	lua 


	/usr/share/nmap/scripts/ этот url указывает на список файлов со скриптами
	*.nse : # сюда входят такие вещи как сетевое обнаружение, более сложные
	определения версий служб и уязвимостей, скрипты даже могут использоваться
	эксплуатации уязвимостей и атак брутфорсингом 

	# каждый скрипт содержит поле связывающее его с одной или несколькими
	категориями, каждый скрипт под одну или несколько категорий 

	[auth] #  используются для аутентификации или для обхода
	аутентификации 

	[broadcast] # обнаружение хостов не перечисленных в командной строке
	при помощи отправки широковещательных запросов в локальной сети 

	[brute] # использующая брутфорс атаки для подбора учетных данных
	при аутентификации

	[default] # дефолтные скрипты используются для обнаружения и предоставляют
	полезную информацию, для сис-админов эти запросы не выглядят как атаки


	-sC: equal to --script=default # эта функция указывает nmap запустить
	дефолтные скрипты 
nmap -sC scanme.nmap.org -v

	ssh-hostkey # скрипт способный добывать ssh(22 порт) ключи
	при помощи которых уникальным образом можно идентифицировать машины
	особенно если они меняют свои ip адреса

	http-favicon # sc получает favicon(значок в левом углу вкладки)
	и ищет его совпадение по базе даннных фавиконов местных веб-приложений 
	если находит совпадение, то выводится название веб приложения,
	в противном случае выводит MD5(hash):1263716D912dDC5

	http-methods # sc сообщает нам какие методы поддерживаются http сервером
	методы TRACE DELETE PUT (они потенциально рискованные) поэтому нужно булет
	провести дальнейший анализ, чаще всего GET HEAD POST OPTIONS

	http-titlte # sc выводит название страницы

	[discovery]	# эти скрипты пытаются активно обнаружить больше инф-ции
	о сети при помощи запросов в публичные реестры (скрипты discovery
	составляют основу nmap)

	[dos] # скрипты для dos аттак - отказа в обслуживании 

	[exploit] # скрипты для эксплуатации различных уязвимостей

	[external] # скрипты которые могут обмениваться данными со сторонними
	базами даных или сетевыми ресурсами (EXAMPLE: внешний скрипт WHOIS )
	
	[fuzzer] # скрипты предназначенные для отправки на серверное ПО
	неожиданных или случайных полей в каждом пакете для поиска ошибок
	при обработке подобных случайных данных

	[intrusive] # скрипты использующие целевое вторжение, могут закрашить
	целевую систему, они могут использовать значимые ресурсы на целевом
	хосте:
	- пропусканая способность 
	- процессорное время
	
	могут расцениваться сис-админами целевых систем как вредоносные 
	
	[malware] # скрипты для тестирования заражена ли целевая платформа
	каким-либо:
	- вредоносным ПО 
	- бекдорами 

	[safe] # безопасные скрипты запуск которых не должен представлять
	опасности без вторжения в удаленные системы 

	[version] # расширение возможностей по обнаружению версий служб
	эти скрипты не могут быть использованы напрямую

	[vuln] # категория проверяющая наличие известных уязвимостей
	и сообщаюшая о находках
---------------------------------------------------------------------------
							TYPE OF SCRIPTS 

FOR RULE OF SCRIPTS 

	1) prerule() # правила предварительное выполнение скрипта до сканирования
			prerule() выполняются один раз перед сканированием хоста  

	2) hostrule(host) # хост правила
	3) portrule(host, port) # порт правила
		hostrule,portrule выполняются после сканирования каждого набора хостов

	4) postrile() # правила выполнение скрипта после сканирования 
		postrule выполняются один раз после того, как все хосты просканированы	
		
	---- скрипт может быть выполнен на более чем одном этапе если он 
	содержит несколько правил

nmap 192.168.0.1 --script default,safe -v -O -sV # выполнить скрипты
			из группы default and safe, вербальность, определение
			ОС и версии служб

nmap -vvv 192.168.0.1 --script=banner # вместо прогона по целым категориям
			можем выполнить отдельный скрипт, 
			скрипт banner - это баннер граберов, который подключается к
			открытому tcp порту и выводит все данные отправдяющей слушающей
			службой в течении 5с. чем больше уровень вербальности, тем больше
			строк будет возващено

nmap -Pn --script=http-xssed scanme.nmap.org # скрипт ищущий уязвимости
		межсайтового скриптинга, search XSS vuln. 
		если мы знаем, что хост работает, зачем
		заморачиваться с его обнаружением, поэтому используем -Pn 

nmap -Pn --script=http-sitemap-generator scanme.nmap.org # скрипт выполняющий
		spidering web-сервера и отображение структур его директорий 
		этот скрипт далек от идеала, но способен найти некоторые 
		базовые структуры директорий

nmap -v --script "http-*" 192.168.0.1 # на выполнение множества http скриптов
		понадобится много времени, так как в некоторых из них используются
		брутфорс атаки 
		"http-*" эта конструкция показывает, что в nmap можно использовать
		подстановки

nmap -n -Pn -p 80 --open -sV -v --script http-method-tamper 192.168.0.1
		# http скрипты также могут искать уязвимости, данный скрипт
		попытается найти уязвимость настройки контроля доступа для методов
		протокола http 
	  
		-n # no DNS resolution - не выполнять преобразование имени,
		используется для ускорения процесса

		-p 80 # определяем поиск только на 80 порту

		--open # nmap покажет результаты только по открытым или потенциально
		открытым портам 

		-sV # определение версий
		
		-vvv # вербальность

----WEB-SERVER SCRIPT

nmap -n -Pn -p 80 --open -sV -vvv --script banner,http-title -iR 100
		# при таком сканировании возможно найдется 1 или 2 работающих
		web сервера на хостах 

----DNS-SUBDNS SCRIPT

nmap -Pn --script=dns-brute facebook.com 
		# этот скрипт перебирает dns имена хостов путем bruteforce перебора
		типовых поддоменов EX: mobile.facebook.com, news.facebook.com, etc..

		# если требуется исчерпывающий список поддоменов можно использовать
		инструменты: Fierce, theHarvester, Recon-ng

----OS-DISCOVERY-SMB-PROTOCOL SCRIPT

nmap --script smb-os-discovery -vv 192.168.0.1
		# скрипт обнаружения ОС по протоколу SMB, locate *smb*.nse


nmap -n -Pn -vv -O -sV --script smb-enum*,smb-ls,smb-mbenum,smb-os-discovery,
smb-s*,smb-vuln* -vv 192.168.0.143
		# практически команда выполнит все smb проверки, которые занимают
		очень много времени 
	
----BROADCAST SCRIPT
nmap --script broadcast -v # широковещательные запросы могут раскрыть
		протокол и детали хоста, скриптовый движок nmap способен собирать
		широковещательные данные сети при помощи данного скрипта

		targets* # скрипты для обнаружения хостов работающих по ipv6
		
		# также скрипты broadcast могут обнаружить удаленные системы 
		такие как: Dropbox, TeamViewer

---SYNTAXIS VARIABLE 

	"broadcast and not targets*"

nmap --script "broadcast and not targets*" -v 
		# исключает скрипты targets* из группы broadcast скриптов
		"broadcast and targets*" 


nmap --script "broadcast and not targets*" -v --script-trace
		
		--script-trace # все входящие и исходящие коммуникации выполняемые
		скриптом будут выводиться в консоль	

nmap --script "not intrusive" -vv 192.168.0.143 
		
		# при такой конструкции будут запущенны все скрипты кроме категории
		скриптов intrusive
		- один из вариантов безоасного запуска без прямого вторжения

nmap --script "vuln,exploit" -vv 192.168.0.143 -sV -O 
		# если требуется поискать уязвимости и найти подходящие для них
		эксплоиты  (vuln,exploit)
		
nmap --script ip-geolocation-* facebook.com 
		# поиск геолокации по доменному имени или ip адресу 
		
		--script ip-geolocation-maxmind # обратиться к папке mannse 

		--script ip-geolocation-ipinfodb # обратиться к папке mannse  
		
nmap --script whois* facebook.com # пример использования внешнего сервиса 
		# whois для получения подробной информации о домене
		

----------------EXTERNAL SCRIPTS (СТОРОННИЕ СКРИПТЫ)--------------
				скрипты не входящие в группы и основную базу скриптов

INSTALL: READ MANNSE/vulscan 

СКРИПТ vulscan работает основываясь на опции -sV    =>

# nmap -sV --script vulscan 192.168.0.1

nmap -sV --script vulscan/vulscan 192.168.0.1

		# vulscan - основываясь на опции -sV определения версий 
		осуществляет поиск известных уязвимостей в загруженных базах данных
		- можно считать его базовым сканером уязвимостей
		исходя из версий он дает feedback касаемо уязвимостей
		также есть подходящие альтернативы с более широким спектром

		1. Qualys
		2. Nessus 
		3. OpenVAS 

nmap -sV --script vulscan/vulscan --script-args vulscaninteractive=1 [HOST]

		--script-args # позволяет указывать аргументы скриптов 

		--script-args vulscaninteractive=1 # в данном случае скрипт будет
		действовать интерактивно, когда будет обнаруживаться определенное
		программное обеспечение, предоставится возможность редактирования
		скрипта

nmap --script-help scriptsname 
		# опция выводит всевозможные инструкции скрипта
		(всевозможные аргументы скрипта, интерактивный режим и т.д)

nmap --script-args-file=filename 
		# некоторые скрипты могут получать аргументы
		из файла при помощи данной опции
		
------------------INTERESTING SCRIPTS-------------------

nmap --script http-open-proxy -p8080 192.168.0.1-200 
		# скрипт для определения прокси на определенном порту 
		диапазона хостов


nmap -p80 --script http-brute --script-args http-brute.path=/admin/ [HOST]

[HOST] = scanme.nmap.org

		-p80 # для использования http-brute определяем порт 

		http-brute # брут http 

		http-brute.path=/admin/ 
		# в качестве аргумента указываем путь на http страницу 
		с аутентификацией по паролю 

nmap -p80 --script http-brute --script-args userdb=/var/usernames.txt,
passdb=/var/passwords.txt scanme.nmap.org

		http-brute # брут http 

		userdb=/var/usernames.txt # аргумент для указания пути к файлу 
		с именами пользователей для брута

		passdb=/var/passwords.txt # аргумент для указания пути к файлу
		с паролями для брута

nmap -p80 --script http-brute --script-args brute.firstOnly

		brute.firstOnly
		# аргумент скрипта http-brute, прекращает bruteforce
		как только обнаруживает одну валидную учетную запись


-------------------SPECIFICE-BRUTFORCE-SCRIPTS---------------

nmap -p80 --script http-wordpress-brute 
--script-args http-wordpress-brute.threads=5 scanme.nmap.org

		http-wordpress-brute 
		# скрипт для брута конструкторских http-wordpress страниц 

		http-wordpress-brute.threads=5 
		# кол-во потоков, которое будет использовать скрипт


-------------------CONTENT-BRUTEFORCE-SCRIPTS----------------

брутфорс скрипты для других систем управления контентом

nmap -p25 --script smtp-brute scanme.nmap.org

		# smtp-brute # smtp брут, брутфорсе pop и imap 
		
		для изучения всех возможных аргументов bruteforce скриптов
		вся информация находится на сайте nmap


-------------------IDENTIFY-WAF-BRANDMAUSER------------------

скрипт для определения, защищен ли хост брендмаузером WAF

nmap -p80 --script http-waf-detect scanme.nmap.org




--------------------------------------------------------------

скрипт для обнаружения межсайтового скриптинга

nmap -p80 --script http-unsafe-output-escaping scanme.nmap.org

---------------------------------------------------------------

скрипт для поиска уязвимостей sql инхъекцией

nmap -p80 --script http-sql-injection scanme.nmap.org 



------------DATABASE-SCRIPTS------------------

скрипт для опроса баз данных 

nmap  -p3306 --script mysql-databases --script-args mysqluser=user,
mysqlpass=password scanme.nmap.org


------------OPEN-RELAY-SCRIPTS----------------

скрипт для определения небезопасных почтовых сервисов, которые
разрешают сторонним доменам использовать их без авторизации
(ОНИ ИСПОЛЬЗУЮТСЯ ВРЕДОНОСНЫМ ОБРАЗОМ В СПАММИНГЕ, ФИШИНГЕ)
!!! ПРЕДСТАВЛЯЮТ СЕРЬЕЗНУЮ УГРОЗУ ОРГАНИЗАЦИИ

nmap -sV --script smtp-open-relay -v scanme.nmap.org
			# встрчаются очень редко

nmap -sV --script smtp-open-relay -v -iR 10000 -p 25 -n -Pn  
			# можно использовать с рандомными хостами

			# ЧТОБЫ УСКОРИТЬ ПРОЦЕСС НУЖНО:

			1) указать порт -p 25
			2) отключить преобразование имен -n 
			3) отключить этап обнаружения -Pn


---------------UPDATE-DATABASE-SCRIPTS-------
скрипт для обновления баз данных скрипов 

nmap --script-updatedb 
	# базу данных стоит обновлять только в том случае если был удален
	или добавлен скрипт из дефолтной директории со скриптами,
	- либо были изменены категории каких-либо скриптов


-------------------------------------------------------------------------

DOESN'T HAVE SUITABLE SCRIPTS

требуется выполнить задачу, но нет подходящего скрипта

LUA BASE LANGUAGE # СКРИПТОВЫЙ движок nmap nse позволяет писать 
простые скрипты на языке программирования LUA в целях автоматизации целевых 
задач или любых других задач, которые необходимо выполнить


--> В этом разделе

-ОПТИМИЗАЦИЯ ОПЦИЙ ТАЙМИНГА и ПРОИЗВОДИТЕЛЬНОСТИ NMAP
для увеличения скорости с которой nmap выполняет сканирование

-НАСТРОЙКА NMAP для обхода систем обнаружения вторжений и файрволов

		-T  #  опция управления временем сканирования 

nmap -v -T0 192.168.0.1 # опция управления временем -T<0-5> включает в себя
			# 6 шаблонов тайминга, их можно определять значениями от 0 до 5
			либо соответствующими названиями шаблона 

			-T0 # PARANOID (параноидный)
			
			-T1 # SNEAKY (хитрый)

			---T0 T1--------------- 
			используются для уклонения
			от обнаружения вторжений (скрытное сканирование)
			ОЧЕНЬ МЕДЛЕННОЕ
			------------------------ 

			-T2 # POLITE (вежливый) # замедляет процесс, меньшая
			нагрузка на полосу пропускания и задействуется меньшее
			количество ресурсов машины

			-T3 # NORMAL (обычный) - дефолтный шаблон

			-T4 # AGGRESSIVE (агрессивный) # ускоряет сканироваие
			предполагается, что работаете с довольно быстрой 
			и надежной сетью, можно использовать этот режим для локальной
			сети 

			-T5 # INSANE (безумный) # предполагается, что работа идет
			чрезвычайно быстрой сетью, либо хотите пожертвовать определнным
			уровнем точности в целях ускорения сканирования

			--- эти шаблоны позволяют определять насколько агрессивно 
			нужно действовать 

-------------------------------------------------

			--min-hostgroup/max-hostgroup <size> 
			# размер групп их хостов для параллельного сканирования

			--min-parallelism/max-parallelism <numprobes>
			# минимальное или максимальное количество запросов
			для группы хостов

			--min-rtt-timeout/max-rtt-timeout/initial-rtt-timeout <time>
			# минимальное максимальное время ожидания ответа на запрос

			--max-retries <tries>
			# максимальное количество повторных попыток, можно ограничить
			количество повторных запросов на сканирование портов

			--host-timeout <time>
			# можно остановить сканирование целей после указанного времени

			--scan-delay/--max-scan-delay <time>
			# можно отрегулировать заддержку между запросами 




-----------------FIREWALL/IDS EVASION AND SPOOFING

--> В этом разделе 

-ОБХОД и СПУФФИНГ ФАЙРВОЛОВ И СИСТЕМ ОБНАРУЖЕНИЯ ВТОРЖЕНИЙ 

nmap -f 192.168.0.1 

		-f # используя эту опцию при сканировании 
		включая PING сканирование будут 
		использоваться небольшие фрагментированные IP packages

		--идея в том, чтобы разделить TCP заголовок на несколько пакетов, 
		чтобы затруднить Фильтрам пакетов и Системам обнаружения вторжений 
		возможность обнаружить ваши действия


nmap --mtu 16 192.168.0.1

		--mtu 16 # также можно установить свой собственный размер фрагмента
		16 байт в данном случае  


		--f or --mtu # при использовании этих опций могут появляться 
		недостоверные результаты, могут выдавать неправильное количество
		доступных портов

nmap -n -D 192.168.0.101,192.168.0.102,192.168.0.103,192.168.0.104 192.168.0.1
		
		-D ficthost1, ficthost2, ...# маскировка сканирования при помощи
		фиктивных хостов, эта опция может запутать относительный
		источник сканирования. 

		-- При использовании этой опции все пакеты исходят с запрашивающей
		машины, но для некоторых из них указываются поддельные ip адреса 
		отправителя, все ответы на поддельные отправители не будут
		доставляться на исходящий сканер. Поэтому их нельзя использовать
		для определения состояний портов.
		
		Цель - запутать средства обнаружения сканеров портов и систем IDS
		и предоставляет информацию в рамках стандартного сканирования
		к тому же она привлекает больше внимания. Система IDS будет 
		фиксировать множественные сканирования портов с уникальных адресов,
		но система не будет знать с какого конкретно хоста исходит сканирование

		!!! В качестве фиктивного хоста можно указать свой сервер, чтобы 
		получить на него логи ответов !!!

---------------------------------------------------
Иногда nmap не может определить ваш исходный ip адрес
nmap сообщит об этой проблеме. 

В подобной ситуации надо использовать опцию -S 
c ip адресом интерфейса с которого необходимо отправлять пакеты

также эта опция используется с указанием интерфейса и пропуском
этапа обнаружения

nmap -S www.microsoft.com www.facebook.com -e wlp3s0 -Pn 
		# ответные данные на такой запрос нельзя увидить
		так как все ответы отправляются на адрес microsoft

------------------------------------------------------
Опция помогает обойти сетевые фильтры и файрволы, может
обмануть некоторые системы IDS и даже системных администраторов

СЛИШКОМ ЧАСТО К ИСХОДНЫМ ПОРТАМ ОКАЗЫВАЕТСЯ ДОВЕРИЕ
ПОРТЫ С ЧРЕЗМЕРНЫМ ДОВЕРИЕМ:

DNS 53/TCP/UDP
FTP 20/TCP
Kerberos 88/TCP/UDP
DHCP 67/UDP 

nmap -n -T4 -g 53 192.168.0.1 

		-g/--source-port 53 # опция задания исходного порта 

		=Эта опция несовместима: 
		- с определением ОС
		- стандартные сокеты ОС: 
			DNS request, TCP Connect, -sV, script сканирование 

ЕСЛИ SYS-ADMIN проверит логи такого сканирования, то
увидит не сканирование с помощью nmap => 
а DNS запросы на неправильный сервер
---------------------------------------------------------


nmap --proxies http://192.168.0.1:8080, http://192.168.0.2:8080 192.168.0.1

		 --proxies http://0.0.:port,http://0.0.:port 
		#  при помощи данной опции можно произвести сканирование своей цели
		через цепочку или более http или socks4 прокси, такой метод
		обхода файрволла может занимать намного больше времени 
		Может понадобиться отрегулировать timeouts, или низкая
		степень параллельности. Использовать прокси в nmap стоит
		только если есть везкие причины 

----------------------------------------

nmap --data-length 200 192.168.0.1 

		--data-length 200 # добавляет рандомные данные к отправляемым пакетам
		обычные пакеты nmap содержат лишь установленные заголовки протоколов
		и лишь в определенных случаях включают в себя специфические payloads
		!! опция лишь немного уменьшает вероятность обнаружения 
		несовместима с -O 

nmap --data 0xAABBCC 192.168.0.1
		
		--data 0xAABBCC # позволяет включить двоичные данные
		в отправлямые пакеты 


nmap --data-string "mwuckert scanned your system" 192.168.0.1 

		--data-string # позволяет включить в отправляемые
		пакеты обычную строку в качестве payloda 

		

--ip-options <options> # при помощи данной опции можно
		изменять флаги в заголовке пакета
		==Редко используются из-за проблем с практичностью
		и безопасностью, многие интернет-маршрутизаторы блокируют
		более опасные опции: 
		- маршрутизация от источника 


--ttl <val> # при помощи данной опции можно
		установить значение в поле time to live
		в заголовке ipv4 пакета


--spoof-mac  <mac-address/prefix/vendor name> 
		# опция подмены мак-адреса, эта опция затрагивает
		только сканирование с использованием сырых пакетов:
		- syn сканирование
		- определение ОС 

		!!! Лучше не использовать данную опцию
		алтернативa: ---------MACCHANGER COMMAND-----------  

nmap -f -T 0 -n -Pn --data-length 200 -D 192.168.0.101,192.168.0.102 \
> 192.168.0.1

		-f # небольшое фрагментирование ip packeta
		-T0 # замедление процесса сканирования
		-D ..,.., # добавление фиктивных хостов
		--data-length 200 # добавление рандомных данных в пакеты 
		# дополнительно можно подменить мак (macchanger commands)

		-- На выходе получается относительно скрытная версия сканирования


--------------------------------------------------------------------------
OUTPUT FUNCTIONS 

- ОПЦИИ функции вывода результатов в формате лучше всего подходящий под нужды 

- Конвертация, изменение результатов

- Советы и бонус инфо по bash скриптам


nmap 192.168.0.143 -T4 -oN normal.file 
		
		-oN filename 
		# опция сохранения результатов вывода nmap в указанный файл



nmap 192.168.0.143 -T4 -oX xml.file

		-oX filename
		# опция сохранения результатов вывода nmap в 
		формате xml в указанный файл



nmap 192.168.0.143 -T4 -oG grep.file

		-oG filename # опция вывода grepable формата в указанный файл
		формат при котором в результате вывода информации о каждом хосте 
		размещена по отдельности.
		
		утилита grep хорошо работает с выходными данными этой опции 

		cat namegrepfile | grep Ports # будет показана инф. о портах
		cat namegrepfile | grep 80 # будет показана инф. о 80 порте



nmap 192.168.0.1 -T4 -oS scriptkiddie.file

		-oS filename # безполезная функция выводит текст в хакерском стиле


nmap 192.168.0.143 -T4 -oA name

		-oA filename # выполнит сразу три опции:
			-oN = filename.nmap
			-oX = filename.xml
			-oG = filename.gnmap


nmap -p80 -sV -oG - --open 192.168.0.1/24 | grep open

		-oG - # не сохранять результаты опции в файл,
		а просто вывести на экран


nmap 192.168.0.1-200 -n -oX out.xml | grep "Nmap" | cut -d " " -f5 > \
> live-hosts.txt

		# скрипт для вывода списка ip адресов 


nmap 192.168.0.143 -T4 -oN filename --append-output

		-oN filename --append-output # добавляет к уже
		существующему файлу с результатами вывода nmap
		новые выходные данные


--------------M---I---S---C---------------

MISC - дополнительные функции 


nmap 192.168.0.1 -T4 -vv
		
		-vv # уровни вербальности, чем больше v, тем
		больше уровень детализации

nmap 192.168.0.1 -T4 -dd

		-dd # отладка, увеличение уровня отладки может пригодиться
		при написании lua скриптов и необходимо отладить их


nmap 192.168.0.1 -T4 --reason
nmap 192.168.0.1 -T4 --reason --open 

		--reason # можно отобразить причину по которой порт находится
		в определенном состоянии, также эту информации можно получить
		при выполнении команды -vv  


nmap 192.168.0.1 -T4 --reason --open --packet-trace 

		--packet-trace # будут отображены все отправленные 
		и полученные пакеты


nmap 192.168.0.1 -T4 --packet-trace --source-port 53
nmap 192.168.0.1 -T4 --packet-trace -g 53

		--source-port 53 # опция указания исходного порта
		с которого будут отправляться пакеты

		-g 53 # аналогичная команда, конструкция разная

nmap --iflist 

		--iflist # отображает интерфейсы хостов и маршрутизаторов 
		для отладки


nmap --resume file2.file 

	 	--resume filename # опция позволяет продожить сканирование
		если по какой-то причине скаинрование было приостаовлено
		работает только при наличии ЛОГ-файла -oN or -oG
		

nmap -6 2607:f0d0:1002:51::4

		-6 # опция для сканирования ipv6
		работает в ipv6 сети 


nmap 192.168.0.1 -A -T4
nmap 192.168.0.1 -O -sV -sC -traceroute -T4 
		
		-A # полное скаинрование включает в себя:
			- определение ОС
			- версий
			- использование скриптов
			- трасировка

